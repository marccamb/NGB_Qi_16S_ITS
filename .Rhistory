points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[j],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"])])
which.min(d[[i]][,"error_mean"])
d[[i]][-which.min(d[[i]][,"error_mean"])]
d[[i]][-which.min(d[[i]][,"error_mean"]),]
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[j],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
for (i in 1:length(d)) {
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[i],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
res_err_rate <- c(res_err_rate, min(d[[i]]$err_mean))
res_err_rate_sd <- c(res_err_rate_sd, min(d[[i]]$err_sd))
}
for (i in 1:length(d)) {
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[i],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
}
for (i in 1:length(d)) {
with(d[[i]][which.min(d[[i]]$err_mean),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(d[[i]][which.min(d[[i]]$err_mean),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[j], bg="white",
col=hue_div_5[i],
data=d[[i]][which.min(d[[i]]$err_mean),])
}
for (i in 1:length(d)) {
with(d[[i]][which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(d[[i]][which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[j], bg="white",
col=hue_div_5[i],
data=d[[i]][which.min(d[[i]]$err_mean),])
}
d[[i]][which.min(d[[i]][,"error_mean"]),]
with(d[[i]][which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]][which.min(d[[i]][,"error_mean"]),]),
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
data.frame(d[[i]][which.min(d[[i]][,"error_mean"]),])
data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),]
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[j], bg="white",
col=hue_div_5[i],
data=d[[i]][which.min(d[[i]]$err_mean),])
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[j], bg="white",
col=hue_div_5[i],
data=data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),])
for (i in 1:length(d)) {
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[i], bg="white",
col=hue_div_5[i],
data=data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),])
}
for (i in 1:length(d)) {
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[i], bg="white",
col=c(1:5)[i],
data=data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),])
}
devtools::use_readme_rmd()
devtools::load_all()
devtools::load_all()
res <- rf.opti.mtry.taxo(tab, treat = z$irrigation, tax.table = assign_16S_ITS,cross.val = "blind",
tain.id="-m-")
res <- rf.opti.mtry.taxo(tab, treat = z$irrigation, tax.table = assign_16S_ITS,cross.val = "blind",
train.id="-m-")
devtools::load_all()
res <- rf.opti.mtry.taxo(tab, treat = z$irrigation, tax.table = assign_16S_ITS,cross.val = "blind",
train.id="-m-")
res <- rf.opti.mtry.taxo(tab, treat = z$irrigation, tax.table = assign_16S_ITS,cross.val = "blind",
train.id="-M-")
par(mfrow=c(1,1), bty="l",las=1, mar=c(4,5,2,1), col.axis="gray", cex.lab=1.5)
plot(c(0.6,1), c(0.6,1), type="n", xlab="Mean precision", ylab="Mean sensitivity")
d <- res
for (i in 1:length(d)) {
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[i],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
}
d[[i]]
devtools::load_all()
res <- rf.blind(tab, treat = z$irrigation, train.id = "-M-", n.forest = 10)
names(res)
res[["summary"]]
par(mfrow=c(1,1), bty="l",las=1, mar=c(4,5,2,1), col.axis="gray", cex.lab=1.5)
plot(c(0.6,1), c(0.6,1), type="n", xlab="Mean precision", ylab="Mean sensitivity")
d <- res
for (i in 1:length(d)) {
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[i],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
}
for (i in 1:length(d)) {
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[i], bg="white",
col=c(1:5)[i],
data=data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),])
}
res <- rf.opti.mtry.taxo(tab, treat = z$irrigation, tax.table = assign_16S_ITS,
cross.val = "blind",
train.id="-M-")
d <- res
for (i in 1:length(d)) {
points(sensitivity_mean~precision_mean,
pch=c(0,1,2,15,16,17)[i],
col=adjustcolor("lightgray", alpha.f = 0.3),
data=d[[i]][-which.min(d[[i]][,"error_mean"]),])
}
d[[i]]
for (i in 1:length(d)) {
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean-precision_sd, sensitivity_mean,
precision_mean+precision_sd, sensitivity_mean,
col=adjustcolor("gray", alpha.f = 0.4))
)
with(data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),],
segments(precision_mean, sensitivity_mean-sensitivity_sd,
precision_mean, sensitivity_mean+sensitivity_sd,
col=adjustcolor("gray", alpha.f = 0.4))
)
points(sensitivity_mean~precision_mean, cex=2,
pch=c(22,21,24,15,16,17)[i], bg="white",
col=c(1:5)[i],
data=data.frame(d[[i]])[which.min(d[[i]][,"error_mean"]),])
}
legend("topleft", pch=c(0,1,2,15,16,17), col=1,bty = "n",
legend=c("Abundant ASVs, bacteria + fungi",
"Abundant ASVs, bacteria",
"Abundant ASVs, fungi",
"All ASVs, bacteria + fungi",
"All ASVs, bacteria",
"All ASVs, fungi"),
cex = 0.7)
legend("left", pch=16, col=hue_div_5[1:length(d)],bty = "n",
legend=names(d),
cex = 0.7)
?aggregate
library(optiranger)
rm(list=ls())
paf <- "~/Documents/Postdoc_Biogeco/2_DROUGHT"
# loading packages
library(vegan)
library(ape)
library(RColorBrewer)
library(knitr)
library(kableExtra)
library(zCompositions)
library(missMDA)
library(DESeq2)
source("~/Documents/Postdoc_Biogeco/2_DROUGHT/src/src_function_points_jitter.R")
source("~/Documents/Postdoc_Biogeco/2_DROUGHT/src/src_function_conv_hull_pcoa.R")
source("~/Documents/Postdoc_Biogeco/2_DROUGHT/src/src_graph_sample_tree_barplot.R")
# DROUGHT1 CAMPAIGN
#16S
tmp <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/data_16S_filtered_formatted.RDS")
asv_table_16S_1 <- tmp[["asv_table"]]
assign_16S_1 <- tmp[["assign"]]
asv_sequences_16S_1 <- tmp[["asv_sequences"]]
samples_16S_1 <- tmp[["samples"]]
samples_16S_1$Species <- as.character(samples_16S_1$Species)
samples_16S_1$Plant_Organ <- as.character(samples_16S_1$Plant_Organ)
samples_16S_1$seq_depth <- apply(asv_table_16S_1, 2, sum)
samples_16S_1_extr <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/exploratory/DROUGHT1/samples_16S_extr_missing_traits.RDS")
rm(tmp)
#ITS
tmp <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/data_ITS_filtered_formatted.RDS")
asv_table_ITS_1 <- tmp[["asv_table"]]
assign_ITS_1 <- tmp[["assign"]]
asv_sequences_ITS_1 <- tmp[["asv_sequences"]]
samples_ITS_1 <- tmp[["samples"]]
samples_ITS_1$Species <- as.character(samples_ITS_1$Species)
samples_ITS_1$Plant_Organ <- as.character(samples_ITS_1$Plant_Organ)
samples_ITS_1$seq_depth <- apply(asv_table_ITS_1, 2, sum)
samples_ITS_1_extr <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/exploratory/DROUGHT1/samples_ITS_extr_missing_traits.RDS")
rm(tmp)
#DROUGHT 2 CAMPAIGN
#16S
tmp <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT2/data_16S_filtered_formatted.RDS")
asv_table_16S_2 <- tmp[["asv_table"]]
assign_16S_2 <- tmp[["assign"]]
asv_sequences_16S_2 <- tmp[["asv_sequences"]]
samples_16S_2 <- tmp[["samples"]]
samples_16S_2$Sp <- as.character(samples_16S_2$Sp)
samples_16S_2$Espece <- as.character(samples_16S_2$Espece)
samples_16S_2$Milieu <- as.character(samples_16S_2$Milieu)
samples_16S_2$Site <- as.character(samples_16S_2$Site)
samples_16S_2$seq_depth <- apply(asv_table_16S_2, 2, sum)
rm(tmp)
#ITS
tmp <- readRDS("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT2/data_ITS_filtered_formatted.RDS")
asv_table_ITS_2 <- tmp[["asv_table"]]
assign_ITS_2 <- tmp[["assign"]]
asv_sequences_ITS_2 <- tmp[["asv_sequences"]]
samples_ITS_2 <- tmp[["samples"]]
samples_ITS_2$Sp <- as.character(samples_ITS_2$Sp)
samples_ITS_2$Espece <- as.character(samples_ITS_2$Espece)
samples_ITS_2$Milieu <- as.character(samples_ITS_2$Milieu)
samples_ITS_2$Site <- as.character(samples_ITS_2$Site)
samples_ITS_2$seq_depth <- apply(asv_table_ITS_2, 2, sum)
rm(tmp)
# Project colors
source("~/Documents/Postdoc_Biogeco/2_DROUGHT/src/src_project_colors.R")
with(samples_16S_1, table(Species))
with(samples_16S_1, table(Species, Sampling_Month))
with(samples_16S_1, table(Species, Plot))
with(samples_16S_1, table(Plot, Sampling_Month))
rm(list = ls())
setwd("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/processed_16S_sequences/")
paf <- getwd()
# Files generated by "src_DADA2_16S_adaptation_Tania.R" and metadata
asv_table <- t(readRDS(file.path(paf, "seqtab_nochim_coll.RDS")))
dimnames(asv_table)[[2]] <- gsub("16S_(.*)_rev.fastq.gz", "\\1", dimnames(asv_table)[[2]])
assign <- readRDS(file.path(paf, "assignment_SILVA_species.RDS"))
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/DROUGHT_sample_metadata.csv", h=T, sep=";", dec=",")
# Creating a table containig ASV sequences and an ASV identifier
asv_sequences <- data.frame("ASV_ID"=paste("ASV_", seq(1:nrow(assign)), sep=""),
"sequence"=dimnames(assign)[[1]])
# Replace asv sequences by their id in tables
dimnames(asv_table)[[1]] <- asv_sequences$ASV_ID
dimnames(assign)[[1]] <- asv_sequences$ASV_ID
# Write a fasta file with ASV sequences
library(seqinr)
asv_sequences$ASV_ID <- as.character(asv_sequences$ASV_ID)
write.fasta(as.list(asv_sequences$sequence), as.list(asv_sequences$ASV_ID),
file.path(paf,"ASV_sequences.fasta"))
# ----------------------------------------
# Curating ASVs found in negative controls
# ----------------------------------------
nb_reads <- sum(asv_table)
# Checking for negative controls
T_neg <- asv_table[,grep("Tneg", dimnames(asv_table)[[2]])]
barplot(T_neg, main="Nb reads in negative controls", ylab = "Nb reads", las=2)
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/metadata_DROUGHT1_v2.csv", h=T, sep=";", dec=",")
# Creating a table containig ASV sequences and an ASV identifier
asv_sequences <- data.frame("ASV_ID"=paste("ASV_", seq(1:nrow(assign)), sep=""),
"sequence"=dimnames(assign)[[1]])
# Replace asv sequences by their id in tables
dimnames(asv_table)[[1]] <- asv_sequences$ASV_ID
dimnames(assign)[[1]] <- asv_sequences$ASV_ID
# Write a fasta file with ASV sequences
library(seqinr)
asv_sequences$ASV_ID <- as.character(asv_sequences$ASV_ID)
write.fasta(as.list(asv_sequences$sequence), as.list(asv_sequences$ASV_ID),
file.path(paf,"ASV_sequences.fasta"))
# ----------------------------------------
# Curating ASVs found in negative controls
# ----------------------------------------
nb_reads <- sum(asv_table)
# Checking for negative controls
T_neg <- asv_table[,grep("Tneg", dimnames(asv_table)[[2]])]
barplot(T_neg, main="Nb reads in negative controls", ylab = "Nb reads", las=2)
# ASVs that are present in negative controls
threshold_T_neg <- apply(T_neg, 1, max)
asv_T_neg <- rownames(T_neg[threshold_T_neg > 0,])
# Set to zero the abundance of ASVs in samples when it is lower than their abindance in negative controls
asv_table <- apply(asv_table,2,function(x) {
z <- x > threshold_T_neg+1
x <- ifelse(z, x, 0)
return(x)
})
nb_reads_Tneg_filt <- sum(asv_table)
# It would probably be a good thing to remove asv with very few reads.
# But lets check if it makes a difference in analysis before remove if permanently
sum(apply(asv_table, 1, sum)<100)
# Checking for positive controls
T_pos <- asv_table[,grep("Tpos", dimnames(asv_table)[[2]])]
sample_name_T_pos <- colnames(T_pos)
asv_T_pos <- rownames(T_pos[apply(T_pos, 1, sum)>0,])
assign[dimnames(assign)[[1]] %in% asv_T_pos,]
# /!\ There is a chloroplast in the controls but it is in very low abundance so ot doesn't impact
# the subsequent filtering
# /!\ Actually it does ! We need to remove it from the positive controls
asv_T_pos <- asv_T_pos[-c(grep("ASV_4", asv_T_pos), grep("ASV_13719", asv_T_pos))]
apply(T_pos, 1, sum)[apply(T_pos, 1, sum)>0]
with(subset(asv_sequences, ASV_ID %in% asv_T_pos),
write.fasta(as.list(sequence), as.list(ASV_ID),file.path(paf, "ASV_sequences_positive_controls.fasta"))
)
barplot(T_pos, main="Nb reads in positive controls", ylab = "Nb reads",
col = ifelse(assign[,"Family"] %in% c("Rhodobacteraceae"), "steelblue3", "indianred3"))
legend("topright", fill=c("steelblue3", "indianred3"), c("Rhodobacteraceae", "Vibrionaceae"))
source("~/Documents/Postdoc_Biogeco/1_NGB/src/src_filter_positive_ctrl_galan.R")
asv_table <- filter_positive_galan(tab=asv_table,
positive_ctrl = sample_name_T_pos,
asv_names_positive = asv_T_pos)
nb_reads_Tneg_Tpos_filt <- sum(asv_table)
asv_table <- asv_table[,apply(asv_table, 2, sum)>100]
nb_reads_Tneg_Tpos_filt_samples_100 <- sum(asv_table)
spurious_asv <- rownames(assign)[assign[,"Kingdom"]!="Bacteria" | is.na(assign[,"Kingdom"])]
spurious_asv <- c(spurious_asv, rownames(assign)[grep("Chloroplast", assign[,"Order"])])
length(spurious_asv) # 7 ASVs are not assigned to Eubacteria, or are chloroplasts
asv_table <- asv_table[!rownames(asv_table) %in% spurious_asv,]
nb_reads_Tneg_Tpos_filt_samples_100_spurASV <- sum(asv_table)
# Removing potential empty rows
asv_table <- asv_table[apply(asv_table, 1, sum)>0,apply(asv_table, 2, sum)>0]
dimnames(asv_table)[[2]]
dimnames(asv_table)[[2]] <- gsub("-", "_", dimnames(asv_table)[[2]])
dimnames(asv_table)[[2]][!dimnames(asv_table)[[2]] %in% samples$Sample_Code]
samples$Sample_Code
names(samples)
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/metadata_DROUGHT1_v2.csv",
h=T, sep="\t", dec=",")
names(samples)
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/metadata_DROUGHT1_v2.csv",
h=T, sep="\t", dec=",")
names(samples)
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/metadata_DROUGHT1_v2.csv",
h=T, sep="\t", dec=",")
names(samples)
rm(list = ls())
setwd("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/processed_16S_sequences/")
paf <- getwd()
# -------------
# Loading files
# -------------
# Files generated by "src_DADA2_16S_adaptation_Tania.R" and metadata
asv_table <- t(readRDS(file.path(paf, "seqtab_nochim_coll.RDS")))
dimnames(asv_table)[[2]] <- gsub("16S_(.*)_rev.fastq.gz", "\\1", dimnames(asv_table)[[2]])
assign <- readRDS(file.path(paf, "assignment_SILVA_species.RDS"))
samples <- read.table("~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/metadata_DROUGHT1_v2.csv",
h=T, sep="\t", dec=",")
# ------------------------
# Creating a sequence file
# ------------------------
# Creating a table containig ASV sequences and an ASV identifier
asv_sequences <- data.frame("ASV_ID"=paste("ASV_", seq(1:nrow(assign)), sep=""),
"sequence"=dimnames(assign)[[1]])
# Replace asv sequences by their id in tables
dimnames(asv_table)[[1]] <- asv_sequences$ASV_ID
dimnames(assign)[[1]] <- asv_sequences$ASV_ID
# Write a fasta file with ASV sequences
library(seqinr)
asv_sequences$ASV_ID <- as.character(asv_sequences$ASV_ID)
write.fasta(as.list(asv_sequences$sequence), as.list(asv_sequences$ASV_ID),
file.path(paf,"ASV_sequences.fasta"))
# ----------------------------------------
# Curating ASVs found in negative controls
# ----------------------------------------
nb_reads <- sum(asv_table)
# Checking for negative controls
T_neg <- asv_table[,grep("Tneg", dimnames(asv_table)[[2]])]
barplot(T_neg, main="Nb reads in negative controls", ylab = "Nb reads", las=2)
# ASVs that are present in negative controls
threshold_T_neg <- apply(T_neg, 1, max)
asv_T_neg <- rownames(T_neg[threshold_T_neg > 0,])
# Set to zero the abundance of ASVs in samples when it is lower than their abindance in negative controls
asv_table <- apply(asv_table,2,function(x) {
z <- x > threshold_T_neg+1
x <- ifelse(z, x, 0)
return(x)
})
nb_reads_Tneg_filt <- sum(asv_table)
# It would probably be a good thing to remove asv with very few reads.
# But lets check if it makes a difference in analysis before remove if permanently
sum(apply(asv_table, 1, sum)<100)
# --------------------------------------------------------------------------------------
# Filtering sequences that are assign to the wrong sample, following Galan et al. (2016)
# --------------------------------------------------------------------------------------
# Checking for positive controls
T_pos <- asv_table[,grep("Tpos", dimnames(asv_table)[[2]])]
# From Tania's script : marine.strains<- c('Sulfitobacter pontiacus',rep("Vibrio splendidus",4))
sample_name_T_pos <- colnames(T_pos)
asv_T_pos <- rownames(T_pos[apply(T_pos, 1, sum)>0,])
assign[dimnames(assign)[[1]] %in% asv_T_pos,]
# /!\ There is a chloroplast in the controls but it is in very low abundance so ot doesn't impact
# the subsequent filtering
# /!\ Actually it does ! We need to remove it from the positive controls
asv_T_pos <- asv_T_pos[-c(grep("ASV_4", asv_T_pos), grep("ASV_13719", asv_T_pos))]
apply(T_pos, 1, sum)[apply(T_pos, 1, sum)>0]
with(subset(asv_sequences, ASV_ID %in% asv_T_pos),
write.fasta(as.list(sequence), as.list(ASV_ID),file.path(paf, "ASV_sequences_positive_controls.fasta"))
)
barplot(T_pos, main="Nb reads in positive controls", ylab = "Nb reads",
col = ifelse(assign[,"Family"] %in% c("Rhodobacteraceae"), "steelblue3", "indianred3"))
legend("topright", fill=c("steelblue3", "indianred3"), c("Rhodobacteraceae", "Vibrionaceae"))
source("~/Documents/Postdoc_Biogeco/1_NGB/src/src_filter_positive_ctrl_galan.R")
asv_table <- filter_positive_galan(tab=asv_table,
positive_ctrl = sample_name_T_pos,
asv_names_positive = asv_T_pos)
nb_reads_Tneg_Tpos_filt <- sum(asv_table)
# -----------------------------------------
# Removing samples with less than 100 reads
# -----------------------------------------
asv_table <- asv_table[,apply(asv_table, 2, sum)>100]
nb_reads_Tneg_Tpos_filt_samples_100 <- sum(asv_table)
# ----------------------
# Removing spurious ASVs
# ----------------------
spurious_asv <- rownames(assign)[assign[,"Kingdom"]!="Bacteria" | is.na(assign[,"Kingdom"])]
spurious_asv <- c(spurious_asv, rownames(assign)[grep("Chloroplast", assign[,"Order"])])
length(spurious_asv) # 7 ASVs are not assigned to Eubacteria, or are chloroplasts
asv_table <- asv_table[!rownames(asv_table) %in% spurious_asv,]
nb_reads_Tneg_Tpos_filt_samples_100_spurASV <- sum(asv_table)
#------------------------
# Formating metadata file
# -----------------------
# Removing potential empty rows
asv_table <- asv_table[apply(asv_table, 1, sum)>0,apply(asv_table, 2, sum)>0]
dimnames(asv_table)[[2]] <- gsub("-", "_", dimnames(asv_table)[[2]])
dimnames(asv_table)[[2]][!dimnames(asv_table)[[2]] %in% samples$Sample_Code]
dimnames(asv_table)[[2]][!dimnames(asv_table)[[2]] %in% samples$Sample_Code_Marine]
samples$Sample_Code_Marine
!dimnames(asv_table)[[2]] %in% samples$Sample_Code_Marine
dimnames(asv_table)[[2]][!dimnames(asv_table)[[2]] %in% samples$Sample_Code_Marine]
samples$Sample_Code <- as.character(samples$Sample_Code_Marine)
samples <- samples[match(dimnames(asv_table)[[2]], samples$Sample_Code),]
assign <- assign[match(dimnames(asv_table)[[1]], dimnames(assign)[[1]]),]
asv_sequences <- asv_sequences[match(dimnames(asv_table)[[1]], asv_sequences$ASV_ID),]
names(samples)
names(samples)[grep("Marine", names(samples))] <- "Sample_Code"
assign <- assign[match(dimnames(asv_table)[[1]], dimnames(assign)[[1]]),]
asv_sequences <- asv_sequences[match(dimnames(asv_table)[[1]], asv_sequences$ASV_ID),]
# Save files
saveRDS(list("samples"=samples,"asv_table"=asv_table,"assign"=assign, "asv_sequences"=asv_sequences),
"~/Documents/Postdoc_Biogeco/2_DROUGHT/data/DROUGHT1/data_16S_filtered_formatted.RDS")
# Summary of read loss through filtering steps:
barplot(cbind(nb_reads,
nb_reads_Tneg_filt,
nb_reads_Tneg_Tpos_filt,
nb_reads_Tneg_Tpos_filt_samples_100,
nb_reads_Tneg_Tpos_filt_samples_100_spurASV),
names.arg = c("Raw", "Tneg", "Tpos", "samples <100", "Spur ASV"),
col="steelblue3",
main="Summary of filtering steps",
ylab="Tot nb of reads")
#--------------------
# Clr transformation
# -------------------
rm(list=ls()[!ls() %in% c("asv_table", "samples")])
library(ALDEx2)
# CLR transform for the species dataset
asv.clr <- aldex.clr(asv_table,
conds = as.character(samples$Plant_Organ), verbose=T,
useMC = F, denom = "all", mc.samples = 128)
asv.clr.mean<-sapply(getMonteCarloInstances(asv.clr),rowMeans) # Average over the different instances
saveRDS(asv.clr.mean, "aldex.clr_mean_asv.RDS")
#saveRDS(asv.clr,"aldex.clr_asv.RDS") # Write to disk
rm(asv.clr) # Remove to free some memory!
library(optiranger)
library(optiranger)
