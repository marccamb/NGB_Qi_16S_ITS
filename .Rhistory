if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- pred$importance
}
rownames(res) <- names(importance) <- paste("nfold_", 1:n.fold,sep="")
rownames(res)
names(importance)
paste("nfold_", 1:n.fold,sep="")
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
<- names(importance) <- paste("nfold_", 1:n.fold,sep="")
names(importance) <- paste("nfold_", 1:n.fold,sep="")
names(importance)
lenght(importance)
length(importance)
importance[[i]]
importance <- list()
i <- 1
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
names(pred)
pred <- ranger::predict(rg, data = test)
pred
pred[[predictions]]
?ranger::importance
ranger::importance(pred)
ranger::importance.ranger(pred)
devtools::load_all()
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
rg
pred <- ranger::predict(rg, data = test)
pred <- stats::predict(rg, data = test)
names(pred)
ranger::importance.ranger(pred)
?importance.ranger
?predict.ranger
pred <- stats::predict.ranger(rg, data = test)
pred <- predict(rg, data = test)
pred
names(pred)
library(ranger)
pred <- predict(rg, data = test)
names(pred)
importance(pred)
?importance
importance(pred)
importance(rg)
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
res
res <- data.frame()
importance <- list()
err_mean <- err_sd <- NULL
TP_mean <- TN_mean <- FP_mean <- FN_mean <- NULL
TP_sd <- TN_sd <- FP_sd <- FN_sd <- NULL
sensitivity_mean <- precision_mean <- NULL
sensitivity_sd <- precision_sd <- NULL
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
res
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
names(importance)
importance
names(importance) <- paste("nfold_", 1:n.fold,sep="")
summary <- data.frame(apply(res,2,mean))
summary <- rbind(summary, apply(res,2,sd))
rownames(summary) <- c("mean", "sd")
res_tot <- list(summary, res, importance)
summary
res
res <- data.frame()
importance <- list()
err_mean <- err_sd <- NULL
TP_mean <- TN_mean <- FP_mean <- FN_mean <- NULL
TP_sd <- TN_sd <- FP_sd <- FN_sd <- NULL
sensitivity_mean <- precision_mean <- NULL
sensitivity_sd <- precision_sd <- NULL
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance()
}
source('~/Documents/Postdoc_Biogeco/1_NGB/src/optiranger/R/rf.nfold.R', echo=TRUE)
tmp <- rf.nfold(tab_agg, treat,
mtry = function(x) n*x/n.mtry,
n.fold = rf.param,
n.tree = n.tree,
seed=seed)
rf.param <- 5
rf.nfold(tab_agg, treat,
mtry = function(x) n*x/n.mtry,
n.fold = rf.param,
n.tree = n.tree,
seed=seed)
tmp <- rf.nfold(tab_agg, treat,
mtry = function(x) n*x/n.mtry,
n.fold = rf.param,
n.tree = n.tree,
seed=seed)
rm(list=ls())
tmp <- readRDS("~/Documents/Postdoc_Biogeco/1_NGB/data/ORPHEE_leaf_microbiota/data_Qi_Qr_16S_filtered_formatted.RDS")
asv_table_16S <- tmp[["asv_table"]]
samples_16S <- tmp[["samples"]]
assign_16S <- tmp[["assign"]]
wp_16S <- tmp[["water_potential"]]
rm(tmp)
# Remove Qr samples from the dataset:
asv_table_16S <- asv_table_16S[,-grep("PU2", colnames(asv_table_16S))]
# Remove ASVs not present in samples:
asv_table_16S <- asv_table_16S[apply(asv_table_16S,1,sum)>0,]
# Remove assignation of ASVs not present in samples:
assign_16S <- assign_16S[match(rownames(asv_table_16S),
rownames(assign_16S)),]
# Remove Qr samples from the metadata
samples_16S <- samples_16S[match(colnames(asv_table_16S),
rownames(samples_16S)),]
# remove endophytes samples from the dataset:
endo_16S <- subset(samples_16S, sample_type=="endo")
asv_table_endo_16S <- asv_table_16S[,match(rownames(endo_16S),
dimnames(asv_table_16S)[[2]])]
samples_16S <- subset(samples_16S, sample_type=="micro")
asv_table_16S <- asv_table_16S[,match(rownames(samples_16S),
dimnames(asv_table_16S)[[2]])]
## Loading ITS data -------------
tmp <- readRDS("~/Documents/Postdoc_Biogeco/1_NGB/data/ORPHEE_leaf_microbiota/data_Qi_Qr_ITS_filtered_formatted.RDS")
asv_table_ITS <- tmp[["asv_table"]]
samples_ITS <- tmp[["samples"]]
assign_ITS <- tmp[["assign"]]
wp_ITS <- tmp[["water_potential"]]
rm(tmp)
# Remove Qr samples from the dataset:
asv_table_ITS <- asv_table_ITS[,-grep("PU2", colnames(asv_table_ITS))]
# Remove ASVs not present in samples:
asv_table_ITS <- asv_table_ITS[apply(asv_table_ITS,1,sum)>0,]
# Remove assignation of ASVs not present in samples:
assign_ITS <- assign_ITS[match(rownames(asv_table_ITS),
rownames(assign_ITS)),]
# Remove Qr samples from the metadata
samples_ITS <- samples_ITS[match(colnames(asv_table_ITS),
rownames(samples_ITS)),]
# remove endophytes samples from the dataset:
endo_ITS <- subset(samples_ITS, sample_type=="endo")
asv_table_endo_ITS <- asv_table_ITS[,match(rownames(endo_ITS),
dimnames(asv_table_ITS)[[2]])]
samples_ITS <- subset(samples_ITS, sample_type=="micro")
asv_table_ITS <- asv_table_ITS[,match(rownames(samples_ITS),
dimnames(asv_table_ITS)[[2]])]
## Combining 16S and ITS datasets
foo <- c(colnames(asv_table_16S), colnames(asv_table_ITS))
foo <- foo[duplicated(foo)]
tmp_16S <- asv_table_16S[,foo]
rownames(tmp_16S) <- paste(rownames(tmp_16S), "16S", sep="_")
tmp_ITS <- asv_table_ITS[,foo]
rownames(tmp_ITS) <- paste(rownames(tmp_ITS), "ITS", sep="_")
asv_table_16S_ITS <- rbind(tmp_16S, tmp_ITS)
tmp_16S <- assign_16S
rownames(tmp_16S) <- paste(rownames(tmp_16S), "16S", sep="_")
tmp_ITS <- assign_ITS
rownames(tmp_ITS) <- paste(rownames(tmp_ITS), "ITS", sep="_")
assign_16S_ITS <- rbind(tmp_16S, tmp_ITS)
samples_16S_ITS <- samples_16S[match(foo, rownames(samples_16S)),]
rm(tmp_16S, tmp_ITS)
tab <- asv_table_16S_ITS
z <- samples_16S_ITS
res <- rf.nfold(tab, treat=z$irrigation, n.fold = 5, mtry=540, seed = 1409)
devtools::load_all()
res <- rf.nfold(tab, treat=z$irrigation, n.fold = 5, mtry=540, seed = 1409)
devtools::load_all()
res <- rf.nfold(tab, treat=z$irrigation, n.fold = 5, mtry=540, seed = 1409)
n.fold = 5
mtry = NULL
n.tree = 500
seed = NA
# Preparing training IDs and dataframe
if (!is.na(seed)) set.seed(seed)
train.idx <- sample(rep(1:n.fold, 1/n.fold * ncol(tab)), replace = F)
tab_agg <- data.frame("treat" = treat, t(tab))
treat <- z$irrigation
tab_agg <- data.frame("treat" = treat, t(tab))
res <- data.frame()
importance <- list()
err_mean <- err_sd <- NULL
TP_mean <- TN_mean <- FP_mean <- FN_mean <- NULL
TP_sd <- TN_sd <- FP_sd <- FN_sd <- NULL
sensitivity_mean <- precision_mean <- NULL
sensitivity_sd <- precision_sd <- NULL
i <- 1
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
pred$predictions
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance()
importance[[i]] <- ranger::importance(pred)
importance[[i]] <- ranger::importance(rg)
devtools::load_all()
res <- rf.nfold(tab, treat=z$irrigation, n.fold = 5, mtry=540, seed = 1409)
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
res
res <- data.frame()
importance <- list()
err_mean <- err_sd <- NULL
TP_mean <- TN_mean <- FP_mean <- FN_mean <- NULL
TP_sd <- TN_sd <- FP_sd <- FN_sd <- NULL
sensitivity_mean <- precision_mean <- NULL
sensitivity_sd <- precision_sd <- NULL
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
res
res <- NULL
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
res
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
names(res)
names(res) <- c("TN","TP","FN","FP","error","sensitivity","precision")
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
res
res <- NULL
importance <- list()
err_mean <- err_sd <- NULL
TP_mean <- TN_mean <- FP_mean <- FN_mean <- NULL
TP_sd <- TN_sd <- FP_sd <- FN_sd <- NULL
sensitivity_mean <- precision_mean <- NULL
sensitivity_sd <- precision_sd <- NULL
for (i in 1:n.fold) {
# Split training and test datasets
train <- tab_agg[train.idx != i, ]
test <- tab_agg[train.idx == i, ]
# Grow the forest and make predictions
if (!is.na(seed)) set.seed(seed)
rg <- ranger::ranger(treat ~ ., data = train,
num.trees = n.tree,
mtry = mtry,
importance = "impurity")
pred <- stats::predict(rg, data = test)
# Store the variables
tmp <- data.frame(table(pred$predictions, test$treat))
TN <- tmp[tmp$Var1=="irr" & tmp$Var2=="irr","Freq"]
TP <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="non-irr","Freq"]
FN <- tmp[tmp$Var1=="non-irr" & tmp$Var2=="irr","Freq"]
FP <- tmp[tmp$Var1=="irr" & tmp$Var2=="non-irr","Freq"]
error <- (FP+FN)/(FP+FN+TP+TN)
sensitivity <- TP/(TP+FN)
precision <- TP/(TP+FP)
res <- rbind(res,c(TN,TP,FN,FP,error,sensitivity,precision))
importance[[i]] <- ranger::importance(rg)
}
res
colnames(res) <- c("TN","TP","FN","FP","error","sensitivity","precision")
res
rownames(res) <- paste("nfold_", 1:n.fold,sep="")
res
names(importance) <- paste("nfold_", 1:n.fold,sep="")
summary <- data.frame(apply(res,2,mean))
summary <- rbind(summary, apply(res,2,sd))
rownames(summary) <- c("mean", "sd")
summary <- data.frame(apply(res,2,mean))
summary
apply(res,2,mean)
rbind(apply(res,2,mean),apply(res,2,sd))
rownames(summary) <- c("mean", "sd")
rownames(summary)
summary
summary <- rbind(apply(res,2,mean),apply(res,2,sd))
rownames(summary)
rownames(summary) <- c("mean", "sd")
summary
res_tot <- list(summary, res, importance)
names(res_tot) <- c("summary","confusion", "importance")
devtools::load_all()
rm(list=ls())
tmp <- readRDS("~/Documents/Postdoc_Biogeco/1_NGB/data/ORPHEE_leaf_microbiota/data_Qi_Qr_16S_filtered_formatted.RDS")
asv_table_16S <- tmp[["asv_table"]]
samples_16S <- tmp[["samples"]]
assign_16S <- tmp[["assign"]]
wp_16S <- tmp[["water_potential"]]
rm(tmp)
# Remove Qr samples from the dataset:
asv_table_16S <- asv_table_16S[,-grep("PU2", colnames(asv_table_16S))]
# Remove ASVs not present in samples:
asv_table_16S <- asv_table_16S[apply(asv_table_16S,1,sum)>0,]
# Remove assignation of ASVs not present in samples:
assign_16S <- assign_16S[match(rownames(asv_table_16S),
rownames(assign_16S)),]
# Remove Qr samples from the metadata
samples_16S <- samples_16S[match(colnames(asv_table_16S),
rownames(samples_16S)),]
# remove endophytes samples from the dataset:
endo_16S <- subset(samples_16S, sample_type=="endo")
asv_table_endo_16S <- asv_table_16S[,match(rownames(endo_16S),
dimnames(asv_table_16S)[[2]])]
samples_16S <- subset(samples_16S, sample_type=="micro")
asv_table_16S <- asv_table_16S[,match(rownames(samples_16S),
dimnames(asv_table_16S)[[2]])]
## Loading ITS data -------------
tmp <- readRDS("~/Documents/Postdoc_Biogeco/1_NGB/data/ORPHEE_leaf_microbiota/data_Qi_Qr_ITS_filtered_formatted.RDS")
asv_table_ITS <- tmp[["asv_table"]]
samples_ITS <- tmp[["samples"]]
assign_ITS <- tmp[["assign"]]
wp_ITS <- tmp[["water_potential"]]
rm(tmp)
# Remove Qr samples from the dataset:
asv_table_ITS <- asv_table_ITS[,-grep("PU2", colnames(asv_table_ITS))]
# Remove ASVs not present in samples:
asv_table_ITS <- asv_table_ITS[apply(asv_table_ITS,1,sum)>0,]
# Remove assignation of ASVs not present in samples:
assign_ITS <- assign_ITS[match(rownames(asv_table_ITS),
rownames(assign_ITS)),]
# Remove Qr samples from the metadata
samples_ITS <- samples_ITS[match(colnames(asv_table_ITS),
rownames(samples_ITS)),]
# remove endophytes samples from the dataset:
endo_ITS <- subset(samples_ITS, sample_type=="endo")
asv_table_endo_ITS <- asv_table_ITS[,match(rownames(endo_ITS),
dimnames(asv_table_ITS)[[2]])]
samples_ITS <- subset(samples_ITS, sample_type=="micro")
asv_table_ITS <- asv_table_ITS[,match(rownames(samples_ITS),
dimnames(asv_table_ITS)[[2]])]
## Combining 16S and ITS datasets
foo <- c(colnames(asv_table_16S), colnames(asv_table_ITS))
foo <- foo[duplicated(foo)]
tmp_16S <- asv_table_16S[,foo]
rownames(tmp_16S) <- paste(rownames(tmp_16S), "16S", sep="_")
tmp_ITS <- asv_table_ITS[,foo]
rownames(tmp_ITS) <- paste(rownames(tmp_ITS), "ITS", sep="_")
asv_table_16S_ITS <- rbind(tmp_16S, tmp_ITS)
tmp_16S <- assign_16S
rownames(tmp_16S) <- paste(rownames(tmp_16S), "16S", sep="_")
tmp_ITS <- assign_ITS
rownames(tmp_ITS) <- paste(rownames(tmp_ITS), "ITS", sep="_")
assign_16S_ITS <- rbind(tmp_16S, tmp_ITS)
samples_16S_ITS <- samples_16S[match(foo, rownames(samples_16S)),]
rm(tmp_16S, tmp_ITS)
tab <- asv_table_16S_ITS
z <- samples_16S_ITS
res <- rf.nfold(tab, treat=z$irrigation, n.fold = 5, mtry=540, seed = 1409)
toto <-res
par(mfrow=c(2,3), mar=c(3,7,3,0), col.axis="black")
for (i in 1:length(toto$importance)) {
barplot(sort(toto$importance[[i]], decreasing = T)[1:20],
main=paste("n-fold", i),
cex.names=1, cex.axis = 1.5,
horiz = T,las=1, border=NA,
xlab = "Gini index")
}
names(res)
